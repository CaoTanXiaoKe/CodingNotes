---
### 总结“ “ 软件 危机” ” 的 成因 和 表现， 思考 解决 之道

**成因：** 软件危机的本源是由于 软件本身固有的复杂性，期望和改变。 软件危机爆发的原
因其实是由软件的特点决定的： （1）. 软件本身固有的复杂性。（2）. 软件的不可见性。
（3）. 软件是不断变化的。 随着软件规模的不断增大，软件本身的这些特点衔接到硬件的
整体复杂度，以及缺少系统的规范化的软件工程方法导致了软件开发的不可控制，无法预计。
**表现：**
-  项目运行超出预算
-  项目不能在规定时间内完成
-  软件质量低落
-  软件通常不匹配需求
-  项目无法管理，且代码难以维护

**解决之道：**
软件开发的本质困难在于：要把现实世界中非形式化的需求转化为形式化的软件。 这
种本质困难是无法从根本上解决的，只能用规范性的方法进行一定程度上的缓解这种复杂
性。 （1）. 系统的规范化的软件开发流程。 规范化的软件开发流程把软件开发过程分为多
个阶段，在每个阶段都进行严格的评估和测试，有效降低了软件开发的夭折率。 （2）. 面
向对象技术。面向对象技术按照人类的自然思维方式，面对客观世界建立软件系统模型，有
利于对问题域和系统责任的理解，也有利于人类的交流。整个开发过程中采用统一的概念和
模型表示，填平了语言之间的鸿沟，使得开发活动之间可以平滑过渡。 面向对象对象的方
法利于排错，而且面向对象技术有利于代码复用。 （3）. 软件复用及组件技术。 软件的复
用和组件技术，使得大型软件的开发从从零开始的模式变成搭积木的模式，并且被复用的代
码和组件更加稳定，可靠。复用和组件技术不仅能大大缩短软件开发的时间，而且能节约大
量软件开发成本。
归纳 总结 软件 过程 模型， 并 比较 各自 的 优缺点 及 适用性

---


### 归纳总结软件过程模型，并比较各自的优缺点及适用性

#### 1. 瀑布模型
**总结：**  瀑布模型基本上是一种文档驱动的模型。特点是：（1）. 阶段间具有顺序性和依
赖性。 （2）. 推迟实现的观点。 （3）. 质量保证的观点。

**优点：** 可强迫开发人员采用规范的方法（例如结构化技术）； 严格地规定了每个阶段必
须提交的文档； 要求每个阶段交出的所有产品都必须经过质量保证小组的细节验证。
缺点：最终开发出的软件很难切合用户的需求，对需求变更不灵活。
适用性： 适合需求明确且不易变更的开发较大型项目，大型团队开发。

**2. 快速原型模型**

**总结：** 快速原型模型是一种线性开发模型，它是增量模型的一种形式，是在开发真实
系统之前，构造一个原型，在该原型基础上，逐渐完成整个系统的开发工作。 快速建
立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成功能全
集的一个子集。

**优点：**能通过不断的和用户交互，从而开发出切合用户需求的产品。 在开发的后期阶
段不会因为发现了规格说明文档的错误而进行较大的返工。

**缺点：**对开发人员的开发速度有较高的要求，没有正规稳定的内部结构。

**适用性：** 用户需求不太明确的项目。

#### 3. 增量模型

**总结：** 增量模型也称为渐增模型，使用增量模型开发软件时，是把软件产品作为一系列
的软件构件来设计，编码，集成和测试的。 每个构件都由多个相互作用的模块构成，
并且能够完成特定的功能。

**优点：** 能在较短的时间内向用户提交可完成一些有用的工作的产品。逐步增加产品的功
能可以使用户有教充裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户
组织带来的冲击。

**缺点：**一方面要求开发人员把软件看做一个整体，另一方面要求开发人员把软件看做构
件序列，每个构件本质上都独立于另一个构件。除非开发人员有足够的技术能力协调好
这一明显的矛盾，否则用增量模型开发出的软件可能不令人满意。
适用性：开发的软件需要分期交付，开发团队人员技术过硬。

#### 4. 螺旋模型

**总结：**使用原型及其它方法尽量降低风险，在每个阶段之前都增加了风险分析过程的快
速原型模型。

**优点：**螺线模型是风险驱动的，能有效评估风险。对可选方案和约束条件的强调有利于
已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标；减少了多次测试
（浪费资金）和测试不足（产品故障多）所带来的风险；利于维护，在维护和开发之间
没有本质区别。

**缺点：**除非软件开发人员具有丰富的风险评估经验和这方面的专门知识，否则将出现真
正的风险： 当项目实际上正在走向灾难时，开发人员还可能人为一切正常。

**适用性：** 内部开发的大规模软件项目。

#### 5. 喷泉模型

**总结：**喷泉模型主要用于采用对象技术的软件开发项目。软件开发过程自下而上周期的
各阶段是相互迭代和无间隙的特性。软件的某个部分常常被重复工作多次，相关对象在
每次迭代中随之加入渐近的软件成分。由于对象概念的引入，表达分析、设计、实现等
活动只用对象类和关系，从而可以较为容易地实现活动的迭代和无间隙，使其开发自然
地包括复复用。

**优点：**各个阶段没有明显的界限，开发人员可以同步进行开发，从而提高软件项目的开
发效益，节省开发时间，而且特别适合面向对象的软件开发过程。

**缺点：**各个开发阶段时重叠的，因此在开发过程中需要大量的开发人员，因此不利于项
目管理。此外这种开发模型要求严格管理文档，使得审核的难度加大，尤其是面向对象
可能随时加入各种信息，需求与资料的情况。

**适用性：**适合面向对向的软件开发过程。